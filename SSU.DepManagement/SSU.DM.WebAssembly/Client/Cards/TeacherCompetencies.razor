@using Models.View
@using SSU.DM.WebAssembly.Client.Extensions
@using SSU.DM.WebAssembly.Shared.Models
@using Syncfusion.Blazor.Navigations
@using Orientation = Radzen.Orientation
@using Models.Request
@using Syncfusion.Blazor.Data

@inject Radzen.DialogService dialogService
@inject HttpClient Http

<RadzenTabs RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Лекции">
            <RadzenTree AllowCheckChildren="true" AllowCheckBoxes="true" @bind-CheckedValues=@lectureCheckedValues Data=@lectureCompetencies>
                <RadzenTreeLevel Expanded="@(obj => ShouldExpanded(obj as TeacherCompetenciesViewItem))"
                                 TextProperty="DisciplineName" ChildrenProperty="Faculties">
                    <Template Context="item">
                        @((item.Value as TeacherCompetenciesViewItem).DisciplineName) 
                        <div class="bg-light text-dark m-lg-2">
                        Приоритет:  
                        <RadzenNumeric  style="width: 52px; height: 30px; margin-left: 5px;" Min="1" Max="10" @bind-Value=@((item.Value as TeacherCompetenciesViewItem).Priority) />
                        </div>
                    </Template>
                </RadzenTreeLevel>
                <RadzenTreeLevel TextProperty="FacultyName"  HasChildren="_ => false"/>
            </RadzenTree>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Практики">
            <RadzenTree AllowCheckChildren="true" AllowCheckBoxes="true" @bind-CheckedValues=@practicalCheckedValues Data=@practicalCompetencies>
                <RadzenTreeLevel Expanded="@(obj => ShouldExpanded(obj as TeacherCompetenciesViewItem))"
                                 TextProperty="DisciplineName" ChildrenProperty="Faculties">
                    <Template Context="item">
                        @((item.Value as TeacherCompetenciesViewItem).DisciplineName) 
                        <div class="bg-light text-dark m-2">
                        Приоритет:  
                        <RadzenNumeric  style="width: 52px; height: 30px; margin-left: 5px;" Min="1" Max="10" @bind-Value=@((item.Value as TeacherCompetenciesViewItem).Priority) />
                        </div>
                    </Template>
                </RadzenTreeLevel>
                <RadzenTreeLevel TextProperty="FacultyName"  HasChildren="_ => false"/>
            </RadzenTree>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Лабораторные">
            <RadzenTree AllowCheckChildren="true" AllowCheckBoxes="true" @bind-CheckedValues=@laboratoryCheckedValues Data=@laboratoryCompetencies>
                <RadzenTreeLevel Expanded="@(obj => ShouldExpanded(obj as TeacherCompetenciesViewItem))"
                                 TextProperty="DisciplineName" ChildrenProperty="Faculties">
                    <Template Context="item">
                        @((item.Value as TeacherCompetenciesViewItem).DisciplineName) 
                        <div class="bg-light text-dark m-2">
                        Приоритет:  
                        <RadzenNumeric  style="width: 52px; height: 30px; margin-left: 5px;" Min="1" Max="10" @bind-Value=@((item.Value as TeacherCompetenciesViewItem).Priority) />
                        </div>
                    </Template>
                </RadzenTreeLevel>
                <RadzenTreeLevel TextProperty="FacultyName"  HasChildren="_ => false"/>
            </RadzenTree>
        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

<RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
    <RadzenButton Click="@((args) => CloseDialog(false))" Variant="Variant.Flat" ButtonStyle="ButtonStyle.Light" Text="Отменить" Style="width: 120px"/>
    <RadzenButton Click="@((args) => CloseDialog(true))" Variant="Variant.Flat" Text="Сохранить" Style="width: 120px"/>
</RadzenStack>

@code {

    [Parameter]
    public TeacherViewItem Teacher { get; set; }

    IEnumerable<TeacherCompetenciesViewItem> lectureCompetencies;
    IEnumerable<object> lectureCheckedValues;
    IEnumerable<TeacherCompetenciesViewItem> practicalCompetencies;
    IEnumerable<object> practicalCheckedValues;
    IEnumerable<TeacherCompetenciesViewItem> laboratoryCompetencies;
    IEnumerable<object> laboratoryCheckedValues;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var allCompetencies = await Http.GetTeacherCompetenciesAsync(Teacher.Id);

        lectureCompetencies = allCompetencies[LessonForm.Lecture].OrderBy(x => x.DisciplineName);
        lectureCheckedValues = GetCheckedCompets(lectureCompetencies.ToList());
        practicalCompetencies = allCompetencies[LessonForm.Practical].OrderBy(x => x.DisciplineName);
        practicalCheckedValues = GetCheckedCompets(practicalCompetencies.ToList());
        laboratoryCompetencies = allCompetencies[LessonForm.Laboratory].OrderBy(x => x.DisciplineName);
        laboratoryCheckedValues = GetCheckedCompets(laboratoryCompetencies.ToList());
    }

    private List<object> GetCheckedCompets(List<TeacherCompetenciesViewItem> compets)
    {
        return compets.Where(x => x.Checked).Cast<object>()
            .Concat(compets.Where(x => !x.Checked).SelectMany(
                x => x.Faculties)
                .Where(x => x.Checked)
            ).ToList();
    }

    async Task CloseDialog(bool saveChanges)
    {
        if (saveChanges)
        {
            var disciplineCompets = lectureCheckedValues
                .Concat(practicalCheckedValues)
                .Concat(laboratoryCheckedValues)
                .OfType<TeacherCompetenciesViewItem>()
                .SelectMany(x => x.Faculties)
                .Select(x => x.Competence)
                .ToList();

            var facultyCompets = lectureCheckedValues
                .Concat(practicalCheckedValues)
                .Concat(laboratoryCheckedValues)
                .OfType<FacultyDisciplineViewItem>()
                .Select(x => x.Competence)
                .Where(x => !disciplineCompets.Contains(x))
                .ToList();
            disciplineCompets.AddRange(facultyCompets);

            var priorities = lectureCompetencies.Select(item => new PriorityItem(item.DisciplineId, LessonForm.Lecture, item.Priority))
                .Concat(practicalCompetencies.Select(item => new PriorityItem(item.DisciplineId, LessonForm.Practical, item.Priority)))
                .Concat(laboratoryCompetencies.Select(item => new PriorityItem(item.DisciplineId, LessonForm.Laboratory, item.Priority)))
                .ToList();
            
            var request = new SaveTeacherCompetenciesRequest
            {
                TeacherId = Teacher.Id,
                Competencies = disciplineCompets,
                Priorities = priorities,
            };
            await Http.SaveTeacherCompetenciesAsync(request);
        }
        dialogService.Close();
    }

    private bool ShouldExpanded(TeacherCompetenciesViewItem? item)
    {
        if (item == null)
            return false;

        if (item.Faculties.All(x => x.Checked))
            return false;

        return item.Faculties.Any(x => x.Checked);
    }
}