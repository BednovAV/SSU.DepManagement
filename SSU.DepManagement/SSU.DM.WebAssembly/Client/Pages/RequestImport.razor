@page "/importrequest"
@using Models.View
@using SSU.DM.WebAssembly.Client.Extensions
@using SSU.DM.WebAssembly.Shared.Models
@using System.Net

@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService

<h3 xmlns="http://www.w3.org/1999/html">Импорт заявки</h3>

<RadzenCard>
    <DownloadButton Text="Скачать шаблон"
                    FileName="Шаблон заявки.xlsx"
                    BusyLength="1"
                    FileLink="@fileUrl"/>
    <RadzenUpload ChooseText="Загрузить заявку" Url="@uploadUrl" Progress=@TrackUploadProgress Complete=@CompleteUpload/>
    <DownloadButton Text="Сформировать общий расчет часов"
                    FileName="общий расчет часов.xlsx"
                    BusyLength="1"
                    FileLink="@GetCalculationOfHoursReportUrl()"
                    Disabled="@(selectedAppForms?.Any() != true)"/>
    <DownloadButton Text="Сформировать карточки учебных поручений"
                    FileName="карточки учебных поручений.xlsx"
                    BusyLength="1"
                    FileLink="@GetDistributionReportUrl()"
                    Disabled="@(selectedAppForms?.Any() != true)"/>
    <DownloadButton Text="Сформировать отчет о распределении учебных поручений"
                    FileName="отчет о распределении учебных поручений.xlsx"
                    BusyLength="1"
                    FileLink="@GetStudyAssignmentReportUrl()"
                    Disabled="@(selectedAppForms?.Any() != true)"/>
    <RadzenButton
        Click="@(async (args) => await AssignTeachers())"
        Text="Распределить преподавателей"
        Disabled="@(selectedAppForms?.Any() != true)" />
</RadzenCard>

<RadzenDataGrid @ref="grid" LoadData="@LoadData" Count="@dataCount" IsLoading="@isDataGridLoading" Data="@appForms"
                TItem="ApplicationFormViewItem" EmptyText="Заявок не найдено"
                AllowRowSelectOnRowClick="false"
                RowExpand="@(item => expandedAppFormIds.Add(item.Id))"
                RowCollapse="@(item => expandedAppFormIds.Remove(item.Id))"
                SelectionMode="DataGridSelectionMode.Multiple" @bind-Value=@selectedAppForms>
    <Template Context="appForm">
        <RadzenDataGrid @ref="miniGrid" Data="@appForm.Disciplines" TItem="AppFormDisciplineViewItem"
                        RowExpand="@(item => expandedDisciplineIds.Add(GetDisciplineId(appForm, item)))"
                        RowCollapse="@(item => expandedDisciplineIds.Remove(GetDisciplineId(appForm, item)))">
            <Template Context="discipline">
                <RadzenDataGrid @ref="requestsGrid" Data="@discipline.Requests" TItem="RequestViewItem" Render="@OnRender">
                    <GroupHeaderTemplate>
                        <i>@(context.Data.Key)</i>
                    </GroupHeaderTemplate>
                    <Columns>
                        <RadzenDataGridColumn TItem="RequestViewItem" Property="GroupNumber" Title="Группа"/>
                        <RadzenDataGridColumn TItem="RequestViewItem" Property="Direction" Title="Направление"/>
                        <RadzenDataGridColumn TItem="RequestViewItem" Property="TotalHours" Title="Часы"/>
                        <RadzenDataGridColumn TItem="RequestViewItem" Title="Преподаватель" TextAlign="TextAlign.Center">
                            <Template Context="request">
                                <RadzenDropDown
                                    TValue="RequestViewItem"
                                    Value=@(request.Teacher?.ToString() ?? "-")
                                    Data=@(teachers.Where(item => request.AvailableTeacherIds.Contains(item.Id) || item.Id == emptyTeacherId))
                                    Name="teacherLink"
                                    Disabled="@(updateTeacherDisabled || appForm.FacultyName == "-")"
                                    Style="width: 80%; max-width: 180px;"
                                    Change="@(async args => await CreateRequestTeacherLink(args, request))"/>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </Template>
            <Columns>
                <RadzenDataGridColumn TItem="AppFormDisciplineViewItem" Property="Name" Title="Название дисциплины"/>
                <RadzenDataGridColumn TItem="AppFormDisciplineViewItem" Property="Semester" Title="Семестр"/>
                <RadzenDataGridColumn TItem="AppFormDisciplineViewItem" Title="Группы">
                    <Template Context="discipline">
                        @(string.Join(", ", discipline.Groups))
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="AppFormDisciplineViewItem" Property="TotalHours" Title="Всего часов"/>
            </Columns>
        </RadzenDataGrid>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="ApplicationFormViewItem" Width="60px">
            <HeaderTemplate>
                <RadzenCheckBox TriState="false" TValue="bool" Value="@(appForms?.Any(i => selectedAppForms?.Contains(i) == true) == true)"
                                Change="@(args => selectedAppForms = args ? appForms.ToList() : null)"/>
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TriState="false" Value="@(selectedAppForms?.Contains(data) == true)"
                                TValue="bool" Change=@((args) => grid.SelectRow(data))/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationFormViewItem" Property="Name" Title="Название" Width="200px" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="ApplicationFormViewItem" Title="Факультет" Width="200px" TextAlign="TextAlign.Center">
            <Template Context="appForm">
                <RadzenDropDown
                    TValue="FacultyViewItem"
                    Value=@appForm.FacultyName
                    Data=@faculties
                    Disabled="updateFacultyDisabled"
                    Style="width: 80%; max-width: 180px;"
                    Change="@(async args => await CreateAppFormFacultyLink(args, appForm))"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationFormViewItem" Property="DateCreated" Title="Дата создания" Width="200px" TextAlign="TextAlign.Center">
            <Template Context="appForm">
                @TimeZoneInfo.ConvertTimeFromUtc(appForm.DateCreated.DateTime, TimeZoneInfo.Local).ToString("dd.MM.yyyy (HH:mm)")
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationFormViewItem" Title="Файл" Width="150px" TextAlign="TextAlign.Center">
            <Template Context="appForm">
                <DownloadButton
                    BusyLength="1"
                    FileLink="@fileUrl.AddParameter("key", appForm.FileKey)"
                    FileName="@AddXlsx(appForm.Name)"
                    Text="Скачать"
                    Style="width: 130px"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationFormViewItem" Title="Удалить" TextAlign="TextAlign.Center" Width="60px">
            <Template Context="appForm">
                <RadzenButton Click="() => ShowDeletePopup(appForm)" Icon="delete"/>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    string fileUrl => Http.GetUrl(RouteConstants.IMPORT_REQUEST_GET_FILE);
    string uploadUrl => Http.GetUrl(RouteConstants.IMPORT_REQUEST_UPLOAD_REQUEST);
    string calculationOfHoursReportUrl => Http.GetUrl(RouteConstants.REPORTS_CALCULATION_OF_HOURS);
    string distributionReportUrl => Http.GetUrl(RouteConstants.REPORTS_DISTRIBUTION);
    string studyAssignmentReportUrl => Http.GetUrl(RouteConstants.REPORTS_STUDY_ASSIGNMENT);
    long emptyTeacherId = -1;

    RadzenDataGrid<ApplicationFormViewItem> grid;
    RadzenDataGrid<AppFormDisciplineViewItem> miniGrid;
    RadzenDataGrid<RequestViewItem> requestsGrid;
    IEnumerable<ApplicationFormViewItem> appForms;
    ISet<Guid> expandedAppFormIds = new HashSet<Guid>();
    ISet<string> expandedDisciplineIds = new HashSet<string>();
    IEnumerable<FacultyViewItem> faculties;
    IEnumerable<TeacherViewItem> teachers;
    IList<ApplicationFormViewItem> selectedAppForms;
    bool isDataGridLoading;
    int dataCount;

    async Task ResetGridAsync()
    {
        grid.Reset(true);
        await grid.FirstPage(true);
    }

    private async Task ShowDeletePopup(ApplicationFormViewItem appForm)
    {
        var isDeleteButtonBusy = false;

        var result = await DialogService.OpenAsync("Необходимо подтвердить", ds =>
            @<RadzenStack Gap="1.5rem">
                <p>Вы действительно хотите удалить заявку <b>@appForm.Name</b>?</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton IsBusy="@isDeleteButtonBusy" Text="Да" Click="() => DeleteAppForm(ds)" Style="width: 80px;" ButtonStyle="ButtonStyle.Danger"/>
                        <RadzenButton Text="Отменить" Click="() => ds.Close()" ButtonStyle="ButtonStyle.Light"/>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);

        return;

        async Task DeleteAppForm(DialogService dialogService)
        {
            isDeleteButtonBusy = true;
            dialogService.Refresh();

            var deleteResult = await Http.DeleteAppFormAsync(appForm.Id);
            dialogService.Close();
            NotificationMessage message;
            if (deleteResult.IsSuccessStatusCode)
            {
                message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Операция выполнена успешно!",
                    Detail = $"Запрос {appForm.Name} успешно удален",
                    Duration = TimeSpan.FromSeconds(2).TotalMilliseconds
                };
            }
            else
            {
                message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Что-то пошло не так!",
                    Detail = $"Не удалось удалить запрос {appForm.Name}",
                    Duration = TimeSpan.FromSeconds(2).TotalMilliseconds
                };
            }
            NotificationService.Notify(message);
            ResetGridAsync();
        }
    }

    private string AddXlsx(string str) => str + ".xlsx";

    private async Task LoadData(LoadDataArgs arg)
    {
        isDataGridLoading = true;

        appForms = (await Http.GetAppFormsAsync()).ToList();
        faculties = await Http.GetFacultiesAsync();
        teachers = (await Http.GetTeachersAsync()).Prepend(new TeacherViewItem { Id = emptyTeacherId });
        selectedAppForms = new List<ApplicationFormViewItem>();
        dataCount = appForms.Count();
        isDataGridLoading = false;
        Task.Run(async () =>
        {
            await grid.ExpandRows(appForms.Where(x => expandedAppFormIds.Contains(x.Id)));
            await miniGrid.ExpandRows(appForms.SelectMany(
                x => x.Disciplines,
                (appForm, discipline) => new { appForm, discipline })
                .Where(x => expandedDisciplineIds.Contains(GetDisciplineId(x.appForm, x.discipline)))
                .Select(x => x.discipline));
        });

    }

    int progress;
    bool showProgress;
    bool showComplete;
    string completionMessage;
    bool cancelUpload = false;


    void TrackUploadProgress(UploadProgressArgs args)
    {
        showProgress = true;
        showComplete = false;
        progress = args.Progress;

        // cancel upload
        args.Cancel = cancelUpload;

        // reset cancel flag
        cancelUpload = false;
    }

    void CompleteUpload(UploadCompleteEventArgs args)
    {
        completionMessage = !args.Cancelled ? "Upload Complete!" : "Upload Cancelled!";

        showProgress = false;
        showComplete = true;

        ResetGridAsync();
        StateHasChanged();
    }

    string GetCalculationOfHoursReportUrl()
    {
        return calculationOfHoursReportUrl
            .AddParameter("appFormIds", selectedAppForms?.Select(x => x.Id.ToString()));
    }
    
    string GetDistributionReportUrl()
    {
        return distributionReportUrl
            .AddParameter("appFormIds", selectedAppForms?.Select(x => x.Id.ToString()));
    }
    
    string GetStudyAssignmentReportUrl()
    {
        return studyAssignmentReportUrl
            .AddParameter("appFormIds", selectedAppForms?.Select(x => x.Id.ToString()));
    }

    bool updateFacultyDisabled = false;

    private async Task<HttpResponseMessage> CreateAppFormFacultyLink(object args, ApplicationFormViewItem appForm)
    {
        updateFacultyDisabled = true;
        if (args is not FacultyViewItem faculty)
        {
            return new HttpResponseMessage(HttpStatusCode.BadRequest);
        }

        var response = await Http.CreateAppFormFacultyLinkAsync(new CreateAppFormFacultyLinkRequest(appForm.Id, faculty.Id));
        updateFacultyDisabled = false;
        
        await grid.RefreshDataAsync();
        return response;
    }

    bool updateTeacherDisabled = false;

    private async Task CreateRequestTeacherLink(object args, RequestViewItem request)
    {
        updateTeacherDisabled = true;
        if (args is not TeacherViewItem teacher)
        {
            return;
        }
        if (teacher.Id == request.Teacher?.Id)
        {
            updateTeacherDisabled = false;
            return;
        }
        var teacherId = teacher.Id == -1 ? (long?)null : teacher.Id;
        var response = await Http.CreateRequestTeacherLinkAsync(
            new CreateRequestTeacherLinkRequest(request.Id, teacherId));
        
        if (response.Type == CreateTeacherLinkResponse.ResponseType.Error)
        {
            var message = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Ошибка!",
                Detail = response.Message,
                Duration = TimeSpan.FromSeconds(10).TotalMilliseconds
            };
            NotificationService.Notify(message);
        }
        else
        {
            if (response.Type == CreateTeacherLinkResponse.ResponseType.Warning)
            {
                var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Внимание!",
                    Detail = response.Message,
                    Duration = TimeSpan.FromSeconds(10).TotalMilliseconds
                };
                NotificationService.Notify(message);
            }
            else if(response.Type == CreateTeacherLinkResponse.ResponseType.Success)
            {
                var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Операция выполнена успешно!",
                    Detail = response.Message,
                    Duration = TimeSpan.FromSeconds(10).TotalMilliseconds
                };
                NotificationService.Notify(message);
            }
            request.Teacher = teacher;
        }
        
        await grid.RefreshDataAsync();
        updateTeacherDisabled = false;
    }

    private async Task AssignTeachers()
    {
        await Http.AssignTeachersAsync(selectedAppForms.Select(x => x.Id).ToList());
        await grid.RefreshDataAsync();
    }

    private void OnRender(DataGridRenderEventArgs<RequestViewItem> args)
    {
        if(args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor(){ Property = "LessonForm", SortOrder = SortOrder.Descending });
            StateHasChanged();
        }
    }

    private string GetDisciplineId(ApplicationFormViewItem appForm, AppFormDisciplineViewItem item)
    {
        return $"{appForm.Id}{item.Name}";
    }

}